service: sns-s3-lambda-example

frameworkVersion: ">=1.1.0 < 2.0.0"

plugins:
  - serverless-webpack

custom:
  # These prefixes are combined with the region and account id
  # to form a (hopefully) globally unique bucket name like so:
  # [prefix]-[region]-[accountId]
  sourceBucketPrefix: source
  targetBucketPrefix: target

  # CloudFormation template resources return different values on ref,
  # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html
  # for S3 the return value is the name of the bucket
  sourceBucketName: 
    Fn::Join:
      - '-'
      - - ${self:service}
        - source
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"
  targetBucketName:
    Fn::Join:
      - '-'
      - - ${self:service}
        - target
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"

  # For SNS topics, Ref returns the Amazon Resource Name (ARN)
  sourceDataAddedTopicName: ${self:service}-data-added
  sourceDataAddedTopicArn:
    Fn::Join:
      - ""
      - - "arn:aws:sns:"
        - Ref: "AWS::Region"
        - ":"
        - Ref: "AWS::AccountId"
        - ":"
        - ${self:custom.sourceDataAddedTopicName}
    # Ref: SourceDataAddedTopic

  # For AWS::IAM::Policy, Ref returns the resource name (just the role name)
  # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  # To get the ARN, we must use GetAtt
  fetchDataLambdaRoleName: ${self:service}-lambda-fetch-data-role
  fetchDataLambdaRoleArn: 
    Fn::GetAtt: FetchDataLambdaRole.Arn
  
provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs6.10
  region: eu-central-1
  environment:
    # The DEBUG environment variable is used by the javascript package 'debug'
    DEBUG: app:*
    REGION: ${self:provider.region}

functions:
  fetchData:
    handler: src/handler.fetchData
    role: FetchDataLambdaRole
    environment:
      TARGET_BUCKET_NAME: ${self:custom.targetBucketName}
    # Here we subscribe to the SNS event
    # The arn will simply execute Ref: SourceDataAddedTopic as described in the custom section above
    events:
      - sns:
          arn: ${self:custom.sourceDataAddedTopicArn}
          topicName: ${self:custom.sourceDataAddedTopicName} 
  
resources:
  Resources:
    SourceDataAddedTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "New data has been added to the source bucket"
        TopicName: ${self:custom.sourceDataAddedTopicName}
    
    # Allow the source bucket to use the SNS topic
    SourceDataAddedTopicPolicy:
      DependsOn: SourceDataAddedTopic
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - sns:Publish
              Resource:
                Ref: SourceDataAddedTopic
              Condition:
                ArnLike:
                  aws:SourceArn:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:*:*:*"
        Topics:
          - Ref: SourceDataAddedTopic

    SourceBucket:
      DependsOn: 
        - SourceDataAddedTopic
        - SourceDataAddedTopicPolicy
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          ${self:custom.sourceBucketName}
          # Fn::Join:
          #   - "-"
          #   - - ${self:custom.sourceBucketPrefix}
          #     - Ref: "AWS::Region"
          #     - Ref: "AWS::AccountId"
        NotificationConfiguration:
          TopicConfigurations:
            - Topic: 
                Fn::Join:
                  - ":"
                  - - "arn:aws:sns"
                    - Ref: "AWS::Region"
                    - Ref: "AWS::AccountId"
                    - ${self:custom.sourceDataAddedTopicName}
              Event: "s3:ObjectCreated:*"

    TargetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          Fn::Join:
            - "-"
            - - ${self:custom.targetBucketPrefix}
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"

    FetchDataLambdaRole:
      DependsOn: 
        - SourceBucket
        - TargetBucket
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.fetchDataLambdaRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: SourceBucket-Get
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - Ref: SourceBucket
          - PolicyName: TargetBucket-Put
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - Ref: TargetBucket
          - PolicyName: CreateLogGroup
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"

